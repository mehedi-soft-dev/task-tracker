schema {
  query: Query
  mutation: Mutation
}

type Mutation {
  createTask(title: String! description: String!): TaskItem! @cost(weight: "10")
  updateTaskStatus(id: UUID! status: TaskItemStatus!): TaskItem @cost(weight: "10")
  updateTask(id: UUID! title: String! description: String!): TaskItem @cost(weight: "10")
  deleteTask(id: UUID!): Boolean! @cost(weight: "10")
}

type Query {
  allTasks(where: TaskItemFilterInput @cost(weight: "10") order: [TaskItemSortInput!] @cost(weight: "10")): [TaskItem!]! @cost(weight: "10")
  taskById(id: UUID!): TaskItem @cost(weight: "10")
}

type TaskItem {
  title: String!
  description: String!
  status: TaskItemStatus!
  id: UUID!
  createdAt: DateTime!
  modifiedAt: DateTime!
}

input DateTimeOperationFilterInput {
  eq: DateTime @cost(weight: "10")
  neq: DateTime @cost(weight: "10")
  in: [DateTime] @cost(weight: "10")
  nin: [DateTime] @cost(weight: "10")
  gt: DateTime @cost(weight: "10")
  ngt: DateTime @cost(weight: "10")
  gte: DateTime @cost(weight: "10")
  ngte: DateTime @cost(weight: "10")
  lt: DateTime @cost(weight: "10")
  nlt: DateTime @cost(weight: "10")
  lte: DateTime @cost(weight: "10")
  nlte: DateTime @cost(weight: "10")
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String @cost(weight: "10")
  neq: String @cost(weight: "10")
  contains: String @cost(weight: "20")
  ncontains: String @cost(weight: "20")
  in: [String] @cost(weight: "10")
  nin: [String] @cost(weight: "10")
  startsWith: String @cost(weight: "20")
  nstartsWith: String @cost(weight: "20")
  endsWith: String @cost(weight: "20")
  nendsWith: String @cost(weight: "20")
}

input TaskItemFilterInput {
  and: [TaskItemFilterInput!]
  or: [TaskItemFilterInput!]
  title: StringOperationFilterInput
  description: StringOperationFilterInput
  status: TaskItemStatusOperationFilterInput
  id: UuidOperationFilterInput
  createdAt: DateTimeOperationFilterInput
  modifiedAt: DateTimeOperationFilterInput
}

input TaskItemSortInput {
  title: SortEnumType @cost(weight: "10")
  description: SortEnumType @cost(weight: "10")
  status: SortEnumType @cost(weight: "10")
  id: SortEnumType @cost(weight: "10")
  createdAt: SortEnumType @cost(weight: "10")
  modifiedAt: SortEnumType @cost(weight: "10")
}

input TaskItemStatusOperationFilterInput {
  eq: TaskItemStatus @cost(weight: "10")
  neq: TaskItemStatus @cost(weight: "10")
  in: [TaskItemStatus!] @cost(weight: "10")
  nin: [TaskItemStatus!] @cost(weight: "10")
}

input UuidOperationFilterInput {
  eq: UUID @cost(weight: "10")
  neq: UUID @cost(weight: "10")
  in: [UUID] @cost(weight: "10")
  nin: [UUID] @cost(weight: "10")
  gt: UUID @cost(weight: "10")
  ngt: UUID @cost(weight: "10")
  gte: UUID @cost(weight: "10")
  ngte: UUID @cost(weight: "10")
  lt: UUID @cost(weight: "10")
  nlt: UUID @cost(weight: "10")
  lte: UUID @cost(weight: "10")
  nlte: UUID @cost(weight: "10")
}

enum SortEnumType {
  ASC
  DESC
}

enum TaskItemStatus {
  PENDING
  COMPLETED
}

"The purpose of the `cost` directive is to define a `weight` for GraphQL types, fields, and arguments. Static analysis can use these weights when calculating the overall cost of a query or response."
directive @cost("The `weight` argument defines what value to add to the overall cost for every appearance, or possible appearance, of a type, field, argument, etc." weight: String!) on SCALAR | OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM | INPUT_FIELD_DEFINITION

"The `@specifiedBy` directive is used within the type system definition language to provide a URL for specifying the behavior of custom scalar definitions."
directive @specifiedBy("The specifiedBy URL points to a human-readable specification. This field will only read a result for scalar types." url: String!) on SCALAR

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime @specifiedBy(url: "https:\/\/www.graphql-scalars.com\/date-time")

scalar UUID @specifiedBy(url: "https:\/\/tools.ietf.org\/html\/rfc4122")